# Forum

1. Thread
2. Reply
3. User

A. Thread is created by a user
B. A reply belongs to a thread, and belongs to a user

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
If U are excpecting exceptions but it shows green in ur test u can add this function in app/Exception/Handler

public function render($request, Throwable $e)
    {
        if (app()->environment() === 'testing') throw $e;

        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// made new directory utilities in test with file functions.php
// We autoloaded this file on dev in composer.json

function create ($class, $attributes=[]){
    return $class::factory()->create($attributes);
}

function make ($class, $attributes=[]){
    return $class::factory()->make($attributes);
}

// we don't use create(), because we are not persisting it(saving). make() method gives u instance, raw() method gives u array of the values
// now this functions are available in our tests
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Because of this common use case, Laravel resource routing assigns the typical create, read, update, and delete ("CRUD") routes to a controller with a single line of code.
To get started, we can use the make:controller Artisan command's --resource option to quickly create a controller to handle these actions:

This command will generate a controller at app/Http/Controllers/PhotoController.php. The controller will contain a method for each of the available resource operations.
Next, you may register a resource route that points to the controller:

use App\Http\Controllers\PhotoController;

Route::resource('photos', PhotoController::class);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
To have access to channels list in our views in AppServiceProvider in method boot we made this

\View::composer('*', function ($view) { // * - mean share it with all views, also u may write the list of views where it needed in array
            $view->with('channels', Channel::all());
        });

        \View::share('channels', Channel::all());
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function to check SQL QUERY

dd($threads->toSql());

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ended on 29-th video
